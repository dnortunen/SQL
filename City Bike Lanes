--# For this project, I downloaded Spotify data from Kaggle.
--# Then I created a table to insert Spotify data into.
--# Finally, I performed analytics on the data using SQL. 

DROP TABLE IF EXISTS SportifyData;

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL );

SELECT * from SpotifyData;

--Come up with several of your own questions
--Q1.) Who are the top 10 artists based on popularity
SELECT artist_name
FROM SpotifyData
ORDER BY popularity DESC
LIMIT 10;

-- Q2.) Who has the most acoustic songs
SELECT artist_name
FROM SpotifyData
ORDER BY acousticness;

SELECT artist_name, acousticness
FROM SpotifyData
ORDER BY acousticness DESC;

--First I determined the avg popularity, danceability, and energy by artist and track. 
SELECT
artist_name
,track_name
,avg(popularity)
,avg(danceability)
,avg(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name;

--#Then I determined who the Top 10 artists are by popularity
SELECT track_name, artist_name, popularity
FROM BIT_DB.spotifydata
ORDER BY popularity desc
LIMIT 10;

--Calculate the average popularity for the artists in the Spotify data table. Then, for every artist with an average popularity of 90 or above, show their name, their average popularity, and label them as a “Top Star”.
--the goal is to answer this one using a Common Table Expression CTE also known as "Temporary Tables" to get hands-on practice with CTEs.
-- Why Use CTEs?
--The problem we just worked through can be answered with a CTE or without a CTE. So when should we choose to use a CTE? Here are the top three reasons you'd want to use one.
--1. Multiple Aggregations
--In SQL, you can't do multiple aggregations at once. For example, AVG(MIN(price)) would give you an error. If you wanted to run a calculation like that, you could use a CTE to first calculate the MIN(price) in the CTE and then calculate the AVG() on that result in the following query.
--2. Readability
--In long SQL queries, a CTE is a good way to improve readability, because it allows you to do one calculation at the beginning instead of using a subquery somewhere within the main query. Subqueries can get confusing because you have to first find the subquery within the query, understand what that's doing, and then understand how that fits within the larger query. With a CTE, you know the CTE part of the query runs first and the rest of the query runs next. That's easy to keep track of!
--3. Multiple Uses within a Query
--When you use a CTE, you can reference the results of it multiple times in the following query. So if you need to do multiple calculations on the results of a CTE, you easily can!

SELECT artist_name, popularity
FROM SpotifyData;

SELECT artist_name,
    avg(popularity) avg_pop
FROM SpotifyData
GROUP BY artist_name;


WITH popularity_average_CTE AS (
    SELECT artist_name,
        avg(popularity) AS avg_pop
    FROM SpotifyData
    GROUP BY artist_name
    )
    
SELECT artist_name,
    avg_pop,
    'Top Star' AS tag
 from popularity_average_CTE
 WHERE avg_pop >= 90
 ORDER by avg_pop DESC;

 
-- Create a new table called CityBikeLanes
CREATE TABLE BIT_DB.CityBikeLanes (
id integer primary key,
year_installed year not null,
year_updated year not null,
street varchar not null,
width_feet integer not null,
safetyrating integer not null,
protected varchar not null)
;

INSERT INTO BIT_DB.CityBikeLanes values(1,2012, 2020, "Chestnut",4,4,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(2,2016, 2020,"Walnut",4,3.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(3,2011, 2020, "Market", 3.5, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(4,2008, 2020,"Locust",4,5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(5,2002, 2020,"South",4.5,4.3,"no");
INSERT INTO BIT_DB.CityBikeLanes values(6,2012, 2021, "18th",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(7,2016, 2021,"2nd",4,3.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(8,2011, 2021, "Lombard", 3.5, 2.2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(9,2008, 2021,"Pine",4,4.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(10,2002, 2021,"Tasker",4.5,4.8,"no");
INSERT INTO BIT_DB.CityBikeLanes values(11,2012, 2020, "Earp",4,4.1,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(12,2016, 2020,"Titan",4,3.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(13,2011, 2020, "Manning", 3.4, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(14,2008, 2020,"Fieldcrest",4,4.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(15,2002, 2020,"York",4.5,4.5,"no");
INSERT INTO BIT_DB.CityBikeLanes values(16,2012, 2021, "Race",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(17,2016, 2021,"Museum",4,3.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(18,2011, 2021, "Altin", 3.5, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(19,2008, 2021,"Fred",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(20,2002, 2021,"Morris",4.5,4.7,"no");
INSERT INTO BIT_DB.CityBikeLanes values(21,2012, 2020, "Jameson",4,3.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(22,2016, 2020,"MLK",4,3.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(23,2011, 2020, "Parker", 3.6, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(24,2008, 2020,"Thomas",4,4.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(25,2002, 2020,"Running",4.5,4.3,"no");
INSERT INTO BIT_DB.CityBikeLanes values(26,2012, 2021, "Waverly",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(27,2016, 2021,"Addison",4,3.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(28,2011, 2021, "Beaver", 3.5, 2.1, "no");
INSERT INTO BIT_DB.CityBikeLanes values(29,2008, 2021,"Kensington",4,5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(30,2002, 2021,"Mouse",4.5,4.5,"no");
INSERT INTO BIT_DB.CityBikeLanes values(31,2012, 2020, "Chestnut",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(32,2016, 2020,"Walnut",4,3.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(33,2011, 2020, "Market", 3.8, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(34,2008, 2020,"Locust",4,4.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(35,2002, 2020,"South",4.5,4.7,"no");
INSERT INTO BIT_DB.CityBikeLanes values(36,2012, 2021, "18th",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(37,2016, 2021,"2nd",4,3.2,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(38,2011, 2021, "Lombard", 3.5, 2.5, "no");
INSERT INTO BIT_DB.CityBikeLanes values(39,2008, 2021,"Pine",4,5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(40,2002, 2021,"Tasker",4.5,4.3,"no");
INSERT INTO BIT_DB.CityBikeLanes values(41,2012, 2020, "Earp",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(42,2016, 2020,"Titan",4,3.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(43,2011, 2020, "Manning", 3.4, 2.7, "no");
INSERT INTO BIT_DB.CityBikeLanes values(44,2008, 2020,"Fieldcrest",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(45,2002, 2020,"York",4.5,4.4,"no");
INSERT INTO BIT_DB.CityBikeLanes values(46,2012, 2021, "Race",4,4.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(47,2016, 2021,"Museum",4,3.4,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(48,2011, 2021, "Altin", 3.7, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(49,2008, 2021,"Fred",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(50,2002, 2021,"Morris",4.5,4.4,"no");
INSERT INTO BIT_DB.CityBikeLanes values(51,2012, 2020, "Jameson",4,4,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(52,2016, 2020,"MLK",4,4,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(53,2011, 2020, "Parker", 3.6, 2.3, "no");
INSERT INTO BIT_DB.CityBikeLanes values(54,2008, 2020,"Thomas",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(55,2002, 2020,"Running",4.5,4.5,"no");
INSERT INTO BIT_DB.CityBikeLanes values(56,2012, 2021, "Waverly",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(57,2016, 2021,"Addison",4,3.6,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(58,2011, 2021, "Beaver", 3.5, 2.5, "no");
INSERT INTO BIT_DB.CityBikeLanes values(59,2008, 2021,"Kensington",4,4.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(60,2002, 2021,"Mouse",4.5,4.3,"no");


-- QUERY #1 
-- Get an overview of the data. Instead of looking at the entire table, 10 rows will do. 
SELECT * FROM CityBikeLanes LIMIT 10;

-- QUERY #2 
-- Run this SQL and make note of what you see. Why are there two rows in the results? 
SELECT * FROM CityBikeLanes WHERE street='Walnut';

--Let's say you work as a data analyst for your city, and your boss wants a list of all the bike lanes that have an average safety rating of 4.0 or higher. 
--She also wants to see the average safety rating for each of those bike lanes, and a label that says "Safe Lane".
-- first find average safety rating
SELECT street, avg(safetyrating) as safe_rating
FROM CityBikeLanes bike_lane
GROUP BY street;

--next wrap the above code in CTE temp table
WITH citybikelanes_CTE AS (
    SELECT street, avg(safetyrating) as safe_rating
    FROM CityBikeLanes bike_lane
    GROUP BY street
)
SELECT street, safe_rating
FROM citybikelanes_CTE;

-- copy and paste above code and now work on the select statement
WITH citybikelanes_CTE AS (
    SELECT street, avg(safetyrating) as safe_rating
    FROM CityBikeLanes bike_lane
    GROUP BY street
)
SELECT street, 
    safe_rating,
    'Safe Lane' AS Label
FROM citybikelanes_CTE
WHERE safe_rating >= 4;

--WINDOW FUNCTIONS  Using the OVER command
SELECT street, safetyrating,
AVG(safetyrating) OVER (PARTITION BY street) as "Average_safety_rating"
FROM CityBikeLanes;
 -- only group by street and you get the average
SELECT street, 
    safetyrating,
    AVG(safetyrating) as "Average_safety_rating"
FROM CityBikeLanes
GROUP BY street;

-- group by street and safety rating and you don't get the average
SELECT street, 
    safetyrating,
    AVG(safetyrating) as "Average_safety_rating"
FROM CityBikeLanes
GROUP BY street, safetyrating;

-- this will give us both individual safety ratings as well as the average for each street
SELECT street, 
    safetyrating,
    AVG(safetyrating) OVER (PARTITION BY street) as "Average_safety_rating"
FROM CityBikeLanes
WHERE street='2nd';

--You need to give your boss the list of all the bike lanes, both safety ratings for each lane given by the two technicians, 
--the average safety rating for each lane, and a label with the recommendation as "Remove", "Leave As-Is", or "Improvements Needed".
--Bike lanes with an average safety rating of 4 or more should be labeled "Leave As-Is".
--Bike lanes with an average safety rating of less than 2.5 should be labeled as "Remove".
--All other bike lanes should be labeled as "Improvements Needed".

--This doesn't work.  the average safety rating CASE statement doesn't work
SELECT street, 
    safetyrating,
    AVG(safetyrating) OVER (PARTITION BY street) as "Average_safety_rating",
    CASE 
        WHEN avg(safetyrating) = 4 THEN 'Leave As-Is'
        WHEN avg(safetyrating) < 2.5 THEN 'Remove'
    ELSE
        'Improvements Needed'
    END AS Recommendation
FROM CityBikeLanes;

--Final SQL code    
SELECT street, 
    safetyrating,
    AVG(safetyrating) OVER (PARTITION BY street) as "Average_safety_rating",
    CASE 
        WHEN avg(safetyrating) OVER (PARTITION BY street) >= 4 THEN 'Leave As-Is'
        WHEN avg(safetyrating) OVER (PARTITION BY street) < 2.5 THEN 'Remove'
    ELSE
        'Improvements Needed'
    END AS Recommendation
FROM CityBikeLanes

